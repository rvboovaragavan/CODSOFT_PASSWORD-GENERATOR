import tkinter as tk
from tkinter import messagebox
import random
import string

class PasswordGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        
        # Password length
        self.length_label = tk.Label(root, text="Password Length:", font=('Helvetica', 12))
        self.length_label.pack(pady=5)
        
        self.length_entry = tk.Entry(root, width=5)
        self.length_entry.pack(pady=5)
        
        # Include uppercase
        self.include_uppercase = tk.BooleanVar()
        self.uppercase_check = tk.Checkbutton(root, text="Include Uppercase", variable=self.include_uppercase, font=('Helvetica', 12))
        self.uppercase_check.pack(pady=5)
        
        # Include numbers
        self.include_numbers = tk.BooleanVar()
        self.numbers_check = tk.Checkbutton(root, text="Include Numbers", variable=self.include_numbers, font=('Helvetica', 12))
        self.numbers_check.pack(pady=5)
        
        # Include special characters
        self.include_special = tk.BooleanVar()
        self.special_check = tk.Checkbutton(root, text="Include Special Characters", variable=self.include_special, font=('Helvetica', 12))
        self.special_check.pack(pady=5)
        
        # Generate button
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.pack(pady=20)
        
        # Password display
        self.password_display = tk.Entry(root, width=30, font=('Helvetica', 12))
        self.password_display.pack(pady=5)
    
    def generate_password(self):
        length = self.length_entry.get()
        
        if not length.isdigit():
            messagebox.showwarning("Warning", "Password length must be a number.")
            return
        
        length = int(length)
        
        if length < 1:
            messagebox.showwarning("Warning", "Password length must be at least 1.")
            return
        
        characters = string.ascii_lowercase
        
        if self.include_uppercase.get():
            characters += string.ascii_uppercase
        if self.include_numbers.get():
            characters += string.digits
        if self.include_special.get():
            characters += string.punctuation
        
        if not characters:
            messagebox.showwarning("Warning", "No character sets selected.")
            return
        
        password = ''.join(random.choice(characters) for _ in range(length))
        self.password_display.delete(0, tk.END)
        self.password_display.insert(0, password)

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGenerator(root)
    root.mainloop()

